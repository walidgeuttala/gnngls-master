device = cuda
  0%|          | 0/10 [00:00<?, ?it/s]  0%|          | 0/10 [00:15<?, ?it/s]
{'node1': tensor([[0.0559],
        [0.1688],
        [0.1974],
        ...,
        [0.3472],
        [0.2033],
        [0.1410]], device='cuda:0'), 'node2': tensor([[0.0559],
        [0.1688],
        [0.1974],
        ...,
        [0.3472],
        [0.2033],
        [0.1410]], device='cuda:0'), 'node3': tensor([[0.0559],
        [0.1688],
        [0.1974],
        ...,
        [0.3472],
        [0.2033],
        [0.1410]], device='cuda:0'), 'node4': tensor([[0.0559],
        [0.1688],
        [0.1974],
        ...,
        [0.3472],
        [0.2033],
        [0.1410]], device='cuda:0'), 'node5': tensor([[0.0559],
        [0.1688],
        [0.1974],
        ...,
        [0.3472],
        [0.2033],
        [0.1410]], device='cuda:0')}
dict_keys(['node1', 'node2', 'node3', 'node4', 'node5'])
{'node1': tensor([[-0.0063],
        [-0.0063],
        [-0.0063],
        ...,
        [-0.0088],
        [-0.0088],
        [-0.0088]], device='cuda:0', grad_fn=<SumBackward1>), 'node2': tensor([[0.0131],
        [0.0131],
        [0.0131],
        ...,
        [0.0200],
        [0.0198],
        [0.0199]], device='cuda:0', grad_fn=<SumBackward1>), 'node3': tensor([[0.0245],
        [0.0248],
        [0.0247],
        ...,
        [0.0245],
        [0.0245],
        [0.0246]], device='cuda:0', grad_fn=<SumBackward1>), 'node4': tensor([[0.0248],
        [0.0272],
        [0.0369],
        ...,
        [0.0509],
        [0.0359],
        [0.0287]], device='cuda:0', grad_fn=<SumBackward1>), 'node5': tensor([[0.0047],
        [0.0141],
        [0.0165],
        ...,
        [0.0290],
        [0.0170],
        [0.0118]], device='cuda:0', grad_fn=<SumBackward1>)}
Traceback (most recent call last):
  File "/project/p_gnn001/code/tsp/tsp/train2.py", line 328, in <module>
    main()
  File "/project/p_gnn001/code/tsp/tsp/train2.py", line 321, in main
    val_loss = run(args)
               ^^^^^^^^^
  File "/project/p_gnn001/code/tsp/tsp/train2.py", line 213, in run
    epoch_loss = train(model, train_loader, args.target, criterion, optimizer, device)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/project/p_gnn001/code/tsp/tsp/train2.py", line 51, in train
    loss = criterion(y_pred, y)
           ^^^^^^^^^^^^^^^^^^^^
  File "/home/p_gnngw/miniconda3/envs/cuda118/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/p_gnngw/miniconda3/envs/cuda118/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/p_gnngw/miniconda3/envs/cuda118/lib/python3.12/site-packages/torch/nn/modules/loss.py", line 535, in forward
    return F.mse_loss(input, target, reduction=self.reduction)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/p_gnngw/miniconda3/envs/cuda118/lib/python3.12/site-packages/torch/nn/functional.py", line 3328, in mse_loss
    if not (target.size() == input.size()):
            ^^^^^^^^^^^
AttributeError: 'dict' object has no attribute 'size'
